/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"line":3,"expression":4,"EOF":5,"tuple":6,"COMMA":7,"constant":8,"variable":9,"layer":10,".":11,"(":12,")":13,"POSITION":14,"SIZE":15,"RECT":16,"CENTER":17,"SUM":18,"MUL":19,"DIV":20,"OR":21,"attribute":22,"number":23,"NATURAL":24,"FLOAT":25,"ATTRIBUTE":26,"ID":27,"RELATIVE":28,"CHILDREN":29,"[":30,"]":31,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"COMMA",11:".",12:"(",13:")",14:"POSITION",15:"SIZE",16:"RECT",17:"CENTER",18:"SUM",19:"MUL",20:"DIV",21:"OR",24:"NATURAL",25:"FLOAT",26:"ATTRIBUTE",27:"ID",28:"RELATIVE",29:"CHILDREN",30:"[",31:"]"},
productions_: [0,[3,2],[6,3],[6,3],[6,3],[6,3],[4,1],[4,1],[4,3],[4,5],[4,1],[4,1],[4,1],[4,1],[4,3],[4,3],[4,3],[4,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,1],[9,3],[9,2],[9,3],[8,3],[8,3],[8,3],[8,1],[8,2],[8,3],[23,1],[23,1],[22,1],[10,1],[10,1],[10,3],[10,4],[10,6],[10,4],[10,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1].replace(/\(this\)/g, 'this'); 
break;
case 2: this.$ = $$[$0-2] + "," + $$[$0]; 
break;
case 3: this.$ = $$[$0-2] + "," + $$[$0]; 
break;
case 4: this.$ = $$[$0-2] + "," + $$[$0]; 
break;
case 5: this.$ = $$[$0-2] + "," + $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0-2] + "," + $$[$0]; 
break;
case 9: this.$ = $$[$0-1].replace(/\(this\)/g, $$[$0-4]); 
break;
case 10: this.$ = "(this).left,(this).top"; 
break;
case 11: this.$ = "(this).width,(this).height"; 
break;
case 12: this.$ = "(this).left,(this).top,(this).width,(this).height"; 
break;
case 13: this.$ = "(this).centerX,(this).centerY"; 
break;
case 14: this.$ = $$[$0-2]+".left,"+$$[$0-2]+".top"; 
break;
case 15: this.$ = $$[$0-2]+".width,"+$$[$0-2]+".height"; 
break;
case 16: this.$ = $$[$0-2]+".left,"+$$[$0-2]+".top,"+$$[$0-2]+".width,"+$$[$0-2]+".height"; 
break;
case 17: this.$ = $$[$0-2]+".centerX,"+$$[$0-2]+".centerY"; 
break;
case 18: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 19: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 20: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 21: this.$ = $$[$0-2] + "*" + $$[$0]; 
break;
case 22: this.$ = $$[$0-2] + "*" + $$[$0]; 
break;
case 23: this.$ = $$[$0-2] + "/" + $$[$0]; 
break;
case 24: this.$ = $$[$0-2] + "|" + $$[$0]; 
break;
case 25: this.$ = $$[$0-2] + "|" + $$[$0]; 
break;
case 26: this.$ = "(this)" + "." + $$[$0]; 
break;
case 27: this.$ = $$[$0-2] + "." + $$[$0]; 
break;
case 28: this.$ = $$[$0-1] + $$[$0]; 
break;
case 29: this.$ = "(" + $$[$0-1] + ")"; 
break;
case 30: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 31: this.$ = $$[$0-2] + "*" + $$[$0]; 
break;
case 32: this.$ = $$[$0-2] + "/" + $$[$0]; 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: this.$ = $$[$0-1] + $$[$0]; 
break;
case 35: this.$ = "(" + $$[$0-1] + ")"; 
break;
case 38: this.$ = $$[$0]; 
break;
case 39: this.$ = $$[$0]; 
break;
case 40:
		this.$ = ($$[$0] == "this" ? $$[$0] : "(this)" + "." + $$[$0]);
	
break;
case 41:
		this.$ = $$[$0-2] + "." + $$[$0];
	
break;
case 42:
		this.$ = ($$[$0-3] == "this" ? "this(" + $$[$0-1] + ")" : "(this)" + "." + $$[$0-3] + "(" + $$[$0-1] + ")");
	
break;
case 43:
		this.$ = $$[$0-5] + "." + $$[$0-3] + "(" + $$[$0-1] + ")";
	
break;
case 44:
		this.$ = "(this)" + ".children[" + $$[$0-1] + "]";
	
break;
case 45:
		this.$ = $$[$0-5] + ".children[" + $$[$0-1] + "]";
	
break;
}
},
table: [{3:1,4:2,8:3,9:4,10:5,12:[1,12],14:[1,6],15:[1,7],16:[1,8],17:[1,9],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{1:[3]},{5:[1,20],7:[1,21]},{5:[2,6],7:[2,6],13:[2,6],18:[1,22],19:[1,23],20:[1,24]},{5:[2,7],7:[2,7],13:[2,7],18:[1,25],19:[1,26],20:[1,27],21:[1,28]},{11:[1,29]},{5:[2,10],7:[2,10],13:[2,10]},{5:[2,11],7:[2,11],13:[2,11]},{5:[2,12],7:[2,12],13:[2,12]},{5:[2,13],7:[2,13],13:[2,13]},{5:[2,33],7:[2,33],13:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33]},{8:30,9:31,10:32,12:[1,12],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{8:33,9:34,10:32,12:[1,12],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{5:[2,26],7:[2,26],13:[2,26],18:[2,26],19:[2,26],20:[2,26],21:[2,26]},{11:[2,39]},{11:[2,40],12:[1,35]},{30:[1,36]},{5:[2,36],7:[2,36],13:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36]},{5:[2,37],7:[2,37],13:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37]},{5:[2,38],7:[2,38],13:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38]},{1:[2,1]},{4:37,8:3,9:4,10:5,12:[1,12],14:[1,6],15:[1,7],16:[1,8],17:[1,9],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{8:38,9:39,10:32,12:[1,12],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{8:40,9:41,10:32,12:[1,12],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{8:42,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{8:45,9:46,10:32,12:[1,12],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{8:47,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{8:48,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{8:49,9:50,10:32,12:[1,12],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{12:[1,51],14:[1,52],15:[1,53],16:[1,54],17:[1,55],22:56,26:[1,19],28:[1,57],29:[1,58]},{5:[2,34],7:[2,34],13:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34]},{5:[2,28],7:[2,28],13:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28]},{11:[1,59]},{13:[1,60],18:[1,22],19:[1,23],20:[1,24]},{13:[1,61],18:[1,25],19:[1,26],20:[1,27],21:[1,28]},{24:[1,62]},{24:[1,63]},{5:[2,8],7:[2,8],13:[2,8]},{5:[2,30],7:[2,30],13:[2,30],18:[2,30],19:[1,23],20:[1,24],21:[2,30]},{5:[2,18],7:[2,18],13:[2,18],18:[2,18],19:[1,26],20:[1,27],21:[2,18]},{5:[2,31],7:[2,31],13:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31]},{5:[2,21],7:[2,21],13:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21]},{5:[2,32],7:[2,32],13:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32]},{8:66,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{8:67,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{5:[2,19],7:[2,19],13:[2,19],18:[2,19],19:[1,23],20:[1,24],21:[2,19]},{5:[2,20],7:[2,20],13:[2,20],18:[2,20],19:[1,26],20:[1,27],21:[2,20]},{5:[2,22],7:[2,22],13:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22]},{5:[2,23],7:[2,23],13:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23]},{5:[2,24],7:[2,24],13:[2,24],18:[1,22],19:[1,23],20:[1,24],21:[2,24]},{5:[2,25],7:[2,25],13:[2,25],18:[1,25],19:[1,26],20:[1,27],21:[2,25]},{4:68,8:3,9:4,10:5,12:[1,12],14:[1,6],15:[1,7],16:[1,8],17:[1,9],18:[1,11],22:13,23:10,24:[1,17],25:[1,18],26:[1,19],27:[1,14],28:[1,15],29:[1,16]},{5:[2,14],7:[2,14],13:[2,14]},{5:[2,15],7:[2,15],13:[2,15]},{5:[2,16],7:[2,16],13:[2,16]},{5:[2,17],7:[2,17],13:[2,17]},{5:[2,27],7:[2,27],13:[2,27],18:[2,27],19:[2,27],20:[2,27],21:[2,27]},{11:[2,41],12:[1,69]},{30:[1,70]},{22:56,26:[1,19],28:[1,57],29:[1,58]},{5:[2,35],7:[2,35],13:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35]},{5:[2,29],7:[2,29],13:[2,29],18:[2,29],19:[2,29],20:[2,29],21:[2,29]},{13:[1,71]},{31:[1,72]},{8:73,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{8:74,12:[1,44],18:[1,43],23:10,24:[1,17],25:[1,18]},{5:[2,34],7:[2,34],13:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34]},{13:[1,60],18:[1,64],19:[1,65],20:[1,24]},{7:[1,21],13:[1,75]},{24:[1,76]},{24:[1,77]},{11:[2,42]},{11:[2,44]},{5:[2,30],7:[2,30],13:[2,30],18:[2,30],19:[1,65],20:[1,24],21:[2,30]},{5:[2,31],7:[2,31],13:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31]},{5:[2,9],7:[2,9],13:[2,9]},{13:[1,78]},{31:[1,79]},{11:[2,43]},{11:[2,45]}],
defaultActions: {14:[2,39],20:[2,1],71:[2,42],72:[2,44],78:[2,43],79:[2,45]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){
"use strict";
if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){
"use strict";
this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){
"use strict";
var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){
"use strict";
var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){
"use strict";
this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){
"use strict";
if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){
"use strict";
this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){
"use strict";
var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){
"use strict";
var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){
"use strict";
var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){
"use strict";
var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){
"use strict";
if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){
"use strict";
var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){
"use strict";
this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){
"use strict";
var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){
"use strict";
if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){
"use strict";
n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){
"use strict";
this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){
"use strict";
return this.conditionStack.length},
options: {},
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1: return 7; 
break;
case 2: return 20; 
break;
case 3: return 18; 
break;
case 4: return 19; 
break;
case 5: return 21; 
break;
case 6: return 12; 
break;
case 7: return 13; 
break;
case 8: return 30; 
break;
case 9: return 31; 
break;
case 10: return 'COMPARATOR'; 
break;
case 11: return 'AT'; 
break;
case 12: return 14; 
break;
case 13: return 15; 
break;
case 14: return 16; 
break;
case 15: return 17; 
break;
case 16: return 26; 
break;
case 17: return 28; 
break;
case 18: return 29; 
break;
case 19: return 27; 
break;
case 20: return 25 
break;
case 21: return 24 
break;
case 22: return 11; 
break;
case 23: return 5; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:,)/,/^(?:\/)/,/^(?:\+|-)/,/^(?:\*)/,/^(?:\|)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:=|>=|<=)/,/^(?:@)/,/^(?:position\b)/,/^(?:size\b)/,/^(?:rect\b)/,/^(?:center\b)/,/^(?:top|right|left|bottom|width|height|centerX|centerY|leading|trailing|baseline\b)/,/^(?:this|super|prev|next\b)/,/^(?:children\b)/,/^(?:[a-zA-Z_]+[a-zA-Z0-9_]*)/,/^(?:[0-9]*(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:\.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
var grammarDistrib = parser;
delete parser;
